package logistics;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

import logistics.CNFFile;
import logistics.EquipmentPack;
import logistics.ORDFile;
import utilities.GoogleSheets;

public class Logistics {

	private Kubernetes kubernetes;
	private String ordPath;
	private static String ordName;
	private String cnfPath;
	private static String simNumbers;

	public static String getSimNumbers() {
		return simNumbers;
	}

	public String getOrdPath() {
		return ordPath;
	}

	public static String getOrdName() {
		return ordName;
	}

	public String getCnfPath() {
		return cnfPath;
	}

	// constructor
	public Logistics(Kubernetes kubernetes) {
		this.kubernetes = kubernetes;
		
		File directory = new File(System.getProperty("user.dir") + "\\generated_Logistic_Files");
	    if (! directory.exists()){
	        directory.mkdir();
	        // If you require it to make the entire directory path including parents,
	        // use directory.mkdirs(); here instead.
	    }
	}

	// Return string of currently running Logisitics pod
	public String getLogisticsPod() {
		// System.out.println("Clicked!!");
		String logisticsPod = null;
		for (String pod : kubernetes.getKubernetesRunningPods()) {
			pod = pod.substring(0, pod.indexOf(" "));
			if (pod.contains("eir-logistics")) {
				// System.out.println(pod);
				logisticsPod = pod;
			}
		}
		return logisticsPod;
	}

	// Get shipping file for a specific order number work folder
	public String getOrderShippingFileWorkFolder(String orderNumber) {

		String result = "";
		BufferedReader bufReader = new BufferedReader(new StringReader(kubernetes.executeCommand("kubectl exec -it "
				+ getLogisticsPod() + " -- /bin/grep -r " + orderNumber + " /data/logistics/shipping/work/")));
		String line = null;
		try {
			while ((line = bufReader.readLine()) != null) {
				result += line.substring(line.indexOf(":") + 1) + "\n";
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
	}
	
	// Get shipping file for a specific order number outbound folder
	public String getOrderShippingFileOutboundFolder(String orderNumber) {

		String result = "";
		BufferedReader bufReader = new BufferedReader(new StringReader(kubernetes.executeCommand("kubectl exec -it "
				+ getLogisticsPod() + " -- /bin/grep -r " + orderNumber + " /data/logistics/shipping/outbound/")));
		String line = null;
		try {
			while ((line = bufReader.readLine()) != null) {
				result += line.substring(line.indexOf(":") + 1) + "\n";
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
	}
	
	// get shipping for multiple orders from work folder
	@SuppressWarnings("deprecation")
	public String getMultipleORDs(List<String> orderList) {
		String result = "";

		for (String orderNumber : orderList) {
			
			long loopStart = System.currentTimeMillis();
			long loopEnd = loopStart + 15 * 1000;
			String string1 = "";
			String string2 = "";
			// To improve speed and performance... assigning logistics.getOrderShippingFileWorkFolder(orderNumber).length(). This will prevent it from greping each time
			while (System.currentTimeMillis() < loopEnd) {
				string1 = getOrderShippingFileWorkFolder(orderNumber);
				string2 = getOrderShippingFileOutboundFolder(orderNumber);
				if (string1.length() > 0 || string2.length() > 0) {
					break;
				}
				
			}
			
			if (string1.length() == 0 && string2.length() == 0) {
				JOptionPane.showMessageDialog(null, "Shipping file has not been generated by logistcs for order number " + orderNumber + ".\nThis may indicate a bug.",
						"Attention", 1);
				Thread.currentThread().stop();
			}
			
			if (string1.length() != 0)
			{
				System.out.println(string1);
				result += string1 + "\n";
			} else
			{
				System.out.println(string2);
				result += string2 + "\n";
			}
			
	}

		return result;
	}


	// get shipping for multiple orders from work folder
	public String getMultipleORDWorkFolder(List<String> orderList) {
		String result = "";

		for (String orderNumber : orderList) {
			String command = "kubectl exec -it "
					+ getLogisticsPod() + " -- /bin/grep -r " + orderNumber + " /data/logistics/shipping/work/";
			BufferedReader bufReader = new BufferedReader(new StringReader(kubernetes.executeCommand(command)));
			System.out.println(command);
			String line = null;
			try {
				while ((line = bufReader.readLine()) != null) {
					result += line.substring(line.indexOf(":") + 1) + "\n";
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return result;
	}
	
	// get shipping for multiple orders from outbound folder
		public String getMultipleORDOutboundFolder(List<String> orderList) {
			String result = "";

			for (String orderNumber : orderList) {
				String command = "kubectl exec -it "
						+ getLogisticsPod() + " -- /bin/grep -r " + orderNumber + " /data/logistics/shipping/outbound/";
				BufferedReader bufReader = new BufferedReader(new StringReader(kubernetes.executeCommand(command)));
				String line = null;
				try {
					while ((line = bufReader.readLine()) != null) {
						result += line.substring(line.indexOf(":") + 1) + "\n";
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			return result;
		}

	public List<String> returnMultipleOrders() {
		List<String> orderList = new ArrayList<String>();
		orderList.add("KF0XEBYI");
		orderList.add("L8ROF8IS");
		return orderList;

	}

	// Get location of shipping file containing specific string(date)
	public String getLocationOrdNameContaining(String date) {
		return kubernetes.executeCommand("kubectl exec -it " + getLogisticsPod()
				+ " -- usr/bin/find /data/logistics/shipping/outbound/ -name *" + date + "*");

	}

	// Get Shipping file for a specific day
	@SuppressWarnings("deprecation")
	public String getDateShippingFile(String orderDateMMDDYY) {
		String date = orderDateMMDDYY.substring(4);
		date += orderDateMMDDYY.substring(2, 4);
		date += orderDateMMDDYY.substring(0, 2);
		String result = "";
		if (getLocationOrdNameContaining(date).length() == 0) {

			JOptionPane.showMessageDialog(null, "No shipping file found for the specified date.", "Attention", 1);
			Thread.currentThread().stop();
		} else {
			BufferedReader bufReader = new BufferedReader(new StringReader(kubernetes.executeCommand(
					"kubectl exec -it " + getLogisticsPod() + " /bin/cat " + getLocationOrdNameContaining(date))));
			String line = null;
			try {
				while ((line = bufReader.readLine()) != null) {
					result += line.substring(line.indexOf(":") + 1) + "\n";
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return result;
	}

	// Save shipping file(String) to .csv file in local directory
	public void saveORD(String ordString) {
		// DateFormat df1 = new SimpleDateFormat("yyMMdd");

		try {
			ordName = "ION_ORD_"
					+ java.time.Clock.systemUTC().instant().toString().replaceAll("T", "_T").replaceAll(":", "-");
			ordName = ordName.substring(0, ordName.length() - 5) + ".CSV";
			ordPath = System.getProperty("user.dir") + "\\generated_Logistic_Files" + "\\" + ordName;
			Files.write(Paths.get(ordPath), ordString.getBytes());
		} catch (IOException eb) {
			// TODO Auto-generated catch block
			eb.printStackTrace();
		}
	}

	// Generate CNF
	@SuppressWarnings("deprecation")
	public void generateCNF(String ordAbsolutePath, String googleSheetName) throws IOException, GeneralSecurityException {
		//Record sim numbers provisioned.
		simNumbers = "";
		// populate the new list of packs
		ArrayList<EquipmentPack> packs = new ArrayList<EquipmentPack>();
		// create the ORD file
		ORDFile ord = new ORDFile(ordPath);
		System.out.println("ORD file found: " + ordPath + "\n");

		// Authorise and make connect to google sheet
		GoogleSheets googleSheet = new GoogleSheets("1s5jEgK9KEh_p5NSXidK213DvSIVGTWlHR2k-1RoCt1Q",
				googleSheetName + "!A1:D");
		List<List<Object>> invSheet = googleSheet.getSheetContent();

		// read pack information from text file-------------------
		int inventoryCounter = 0;
		try {
			// Read the pack information from the sheet
			// while there are simpacks in the inventory google sheet
			while (invSheet.size() != 0) {
				
				// while there are more lines of inventory required
				if(inventoryCounter < ord.getLineItems().size()) {
					// String[] packDetails = thisLine.split(",");

					// create and add the pack
					EquipmentPack pack = new EquipmentPack(invSheet.get(0).get(1).toString(),
							invSheet.get(0).get(0).toString(), invSheet.get(0).get(2).toString(),
							invSheet.get(0).get(3).toString());
					packs.add(pack);
					if (simNumbers.length() == 0) {
						simNumbers = simNumbers + invSheet.get(0).get(1).toString();
					} else {
						simNumbers = simNumbers +"," + invSheet.get(0).get(1).toString();
					}
					invSheet.remove(0);

					// increment the counter
					inventoryCounter++;
					
				} else {
					break;
				}
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}

		// ---------------------------------------------

		// create a corresponding CNF file, linking a list of sim packs and a list of
		// handsets
		CNFFile cnf = null;
		try {
			cnf = new CNFFile(ord, packs, null);

		} catch (java.lang.IndexOutOfBoundsException e) {
			// TODO: handle exception
			System.out.println("CAUGHT");
			JOptionPane.showMessageDialog(null, "Not enough simpacks in inventory. Unable to process ORD.", "Attention",
					1);
			Thread.currentThread().stop();
		}
		cnfPath = System.getProperty("user.dir") + "\\generated_Logistic_Files" + "\\" + CNFFile.getCnfName();

		// print the ORD and CNF contents to the console
		System.out.println("ORD File: " + ordPath);

		// System.out.println("\n\nGenerated the following CNF file: " +
		// cnf.getCnfName() + "\n");

		System.out.println("CNF File: " + cnfPath);

		System.out.println("-----------------------------------------------\n\n");

		// write the CNF details to a file
		try {
			cnf.writeCNFFile();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// Remove used inventory from invetorySheet
		/*
		 * E2EInventory Sheet ID = 284753262 
		 * PerINventory Sheet ID = 1697454824
		 */
		// If googleSheetName is E2EInventory , delete from E2EInventory sheet. Else delete from PerfInventory Sheet
		if (googleSheetName == "E2EInventory") {
			googleSheet.deleteRowRange(284753262, 0, inventoryCounter);
		} else {
			googleSheet.deleteRowRange(1697454824, 0, inventoryCounter);
		}
	}

	// Send CNF file to Logistics inbounds
	public void sendCNF(String cnfPath) {
		kubernetes.uploadFile(cnfPath);
		kubernetes.executeCommand(
				"kubectl cp " + CNFFile.getCnfName() + " " + getLogisticsPod() + ":/data/logistics/delivery/inbound");
		kubernetes.deleteFile("/home/beka/" + CNFFile.getCnfName());
	}

}
